from aiogram import Router, types
from aiogram.filters import Command
from utils.database import get_user_reminders
from datetime import datetime
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging

router = Router()

@router.message(Command("list"))
async def list_tasks(message: types.Message):
    try:
        await message.answer("üïí –ù–∞—á–∏–Ω–∞—é –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á...")
        tasks = await get_user_reminders(message.from_user.id)
        logging.info(f"User {message.from_user.id} requested list, found tasks: {tasks}")

        if not tasks:
            await message.answer("ü´• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return

        for task_id, text, time_str in tasks:
            try:
                dt = datetime.fromisoformat(time_str)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã '{time_str}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                dt = None

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")]
            ])

            date_str = dt.strftime('%d.%m %H:%M') if dt else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
            await message.answer(
                f"üïí <b>{date_str}</b>\n\nüìå <i>{text}</i>",
                reply_markup=kb
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ list_tasks: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")
